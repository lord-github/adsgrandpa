import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

TOKEN = "7586200359:AAFiRlrLXt_usEmPW4J26e-qGXp6QPLOTwA"
AD_URL = "https://example.com/ad"  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
REWARD_AMOUNT = 10  # –°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0
)""")
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def add_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 0))
        conn.commit()

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì∫ –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="watch_ad"),
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="check_balance"),
        InlineKeyboardButton("üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/support")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
    )
    return keyboard

@dp.message_handler(commands=["start"])
async def start(message: Message):
    user_id = message.from_user.id
    add_user(user_id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@dp.callback_query_handler(lambda c: c.data == "watch_ad")
async def watch_ad(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, f"–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –ø–æ —Å—Å—ã–ª–∫–µ: {AD_URL}\n–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ì–æ—Ç–æ–≤–æ'.",
                           reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="ad_done")))

@dp.callback_query_handler(lambda c: c.data == "ad_done")
async def ad_done(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (REWARD_AMOUNT, user_id))
    conn.commit()
    await bot.answer_callback_query(callback_query.id, "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –º–æ–Ω–µ—Ç!")
    await bot.send_message(user_id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {REWARD_AMOUNT} –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_main_keyboard())

@dp.callback_query_handler(lambda c: c.data == "check_balance")
async def check_balance(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    balance = cursor.fetchone()[0]
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç", reply_markup=get_main_keyboard())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
